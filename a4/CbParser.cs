// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  SUNTORY
// DateTime: 28-Jun-14 11:17:17
// UserName: nigelh
// Input file <CbParser.y - 27-Jun-14 17:14:08>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace FrontEnd
{
public enum Tokens {error=126,
    EOF=127,OROR=128,ANDAND=129,EQEQ=130,NOTEQ=131,GTEQ=132,
    LTEQ=133,Kwd_break=134,Kwd_char=135,Kwd_class=136,Kwd_const=137,Kwd_else=138,
    Kwd_if=139,Kwd_int=140,Kwd_new=141,Kwd_null=142,Kwd_override=143,Kwd_public=144,
    Kwd_return=145,Kwd_static=146,Kwd_string=147,Kwd_using=148,Kwd_virtual=149,Kwd_void=150,
    Kwd_while=151,PLUSPLUS=152,MINUSMINUS=153,Ident=154,CharConst=155,IntConst=156,
    StringConst=157};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<AST,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public AST yylval;
  public LexLocation yylloc;
  public ScanObj( int t, AST val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<AST, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[100];
  private static State[] states = new State[195];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "UsingList", "ClassList", "Identifier", "ClassDecl", 
      "DeclList", "ConstDecl", "FieldDecl", "MethodDecl", "Type", "InitVal", 
      "AnInteger", "AChar", "AString", "IdentList", "MethodAttr", "MethodType", 
      "OptFormals", "Block", "FormalPars", "FormalDecl", "TypeName", "BuiltInType", 
      "Statement", "Designator", "Expr", "OptActuals", "ActPars", "DeclsAndStmts", 
      "LocalDecl", "UnaryExpr", "UnaryExprNotUMinus", "Qualifiers", };

  static Parser() {
    states[0] = new State(-3,new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{127,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{148,191,136,6},new int[]{-4,4,-6,194});
    states[4] = new State(new int[]{136,6,127,-2},new int[]{-6,5});
    states[5] = new State(-6);
    states[6] = new State(new int[]{154,27},new int[]{-5,7});
    states[7] = new State(new int[]{123,8,58,186});
    states[8] = new State(-9,new int[]{-7,9});
    states[9] = new State(new int[]{125,10,144,14},new int[]{-8,11,-9,12,-10,13});
    states[10] = new State(-7);
    states[11] = new State(-10);
    states[12] = new State(-11);
    states[13] = new State(-12);
    states[14] = new State(new int[]{137,15,154,27,140,33,147,34,135,35,146,183,149,184,143,185},new int[]{-11,36,-17,42,-23,28,-5,31,-24,32});
    states[15] = new State(new int[]{154,27,140,33,147,34,135,35},new int[]{-11,16,-23,28,-5,31,-24,32});
    states[16] = new State(new int[]{154,27},new int[]{-5,17});
    states[17] = new State(new int[]{61,18});
    states[18] = new State(new int[]{156,22,155,24,157,26},new int[]{-12,19,-13,21,-14,23,-15,25});
    states[19] = new State(new int[]{59,20});
    states[20] = new State(-13);
    states[21] = new State(-14);
    states[22] = new State(-97);
    states[23] = new State(-15);
    states[24] = new State(-98);
    states[25] = new State(-16);
    states[26] = new State(-99);
    states[27] = new State(-96);
    states[28] = new State(new int[]{91,29,154,-31});
    states[29] = new State(new int[]{93,30});
    states[30] = new State(-32);
    states[31] = new State(-33);
    states[32] = new State(-34);
    states[33] = new State(-35);
    states[34] = new State(-36);
    states[35] = new State(-37);
    states[36] = new State(new int[]{154,27},new int[]{-16,37,-5,41});
    states[37] = new State(new int[]{59,38,44,39});
    states[38] = new State(-17);
    states[39] = new State(new int[]{154,27},new int[]{-5,40});
    states[40] = new State(-18);
    states[41] = new State(-19);
    states[42] = new State(new int[]{150,181,154,27,140,33,147,34,135,35},new int[]{-18,43,-11,182,-23,28,-5,31,-24,32});
    states[43] = new State(new int[]{154,27},new int[]{-5,44});
    states[44] = new State(new int[]{40,45});
    states[45] = new State(new int[]{154,27,140,33,147,34,135,35,41,-26},new int[]{-19,46,-21,175,-22,180,-11,178,-23,28,-5,31,-24,32});
    states[46] = new State(new int[]{41,47});
    states[47] = new State(new int[]{123,49},new int[]{-20,48});
    states[48] = new State(-20);
    states[49] = new State(-58,new int[]{-30,50});
    states[50] = new State(new int[]{125,51,154,27,139,147,151,154,134,159,145,161,123,49,59,166,140,33,147,34,135,35},new int[]{-25,52,-31,53,-26,54,-5,142,-20,165,-23,167,-24,170});
    states[51] = new State(-54);
    states[52] = new State(-59);
    states[53] = new State(-60);
    states[54] = new State(new int[]{61,55,40,134,152,138,153,140});
    states[55] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,56,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[56] = new State(new int[]{59,57,128,58,129,60,130,62,131,64,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82});
    states[57] = new State(-38);
    states[58] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,59,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[59] = new State(new int[]{128,-61,129,60,130,62,131,64,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82,59,-61,44,-61,41,-61,93,-61});
    states[60] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,61,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[61] = new State(new int[]{128,-62,129,-62,130,62,131,64,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82,59,-62,44,-62,41,-62,93,-62});
    states[62] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,63,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[63] = new State(new int[]{128,-63,129,-63,130,62,131,64,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82,59,-63,44,-63,41,-63,93,-63});
    states[64] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,65,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[65] = new State(new int[]{128,-64,129,-64,130,62,131,64,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82,59,-64,44,-64,41,-64,93,-64});
    states[66] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,67,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[67] = new State(new int[]{128,-65,129,-65,130,-65,131,-65,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82,59,-65,44,-65,41,-65,93,-65});
    states[68] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,69,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[69] = new State(new int[]{128,-66,129,-66,130,-66,131,-66,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82,59,-66,44,-66,41,-66,93,-66});
    states[70] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,71,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[71] = new State(new int[]{128,-67,129,-67,130,-67,131,-67,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82,59,-67,44,-67,41,-67,93,-67});
    states[72] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,73,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[73] = new State(new int[]{128,-68,129,-68,130,-68,131,-68,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82,59,-68,44,-68,41,-68,93,-68});
    states[74] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,75,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[75] = new State(new int[]{128,-69,129,-69,130,-69,131,-69,133,-69,60,-69,132,-69,62,-69,43,-69,45,-69,42,78,47,80,37,82,59,-69,44,-69,41,-69,93,-69});
    states[76] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,77,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[77] = new State(new int[]{128,-70,129,-70,130,-70,131,-70,133,-70,60,-70,132,-70,62,-70,43,-70,45,-70,42,78,47,80,37,82,59,-70,44,-70,41,-70,93,-70});
    states[78] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,79,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[79] = new State(-71);
    states[80] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,81,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[81] = new State(-72);
    states[82] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,83,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[83] = new State(-73);
    states[84] = new State(-74);
    states[85] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,86,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[86] = new State(new int[]{128,-75,129,-75,130,-75,131,-75,133,-75,60,-75,132,-75,62,-75,43,-75,45,-75,42,78,47,80,37,82,59,-75,44,-75,41,-75,93,-75});
    states[87] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,88,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[88] = new State(new int[]{128,-76,129,-76,130,-76,131,-76,133,-76,60,-76,132,-76,62,-76,43,-76,45,-76,42,78,47,80,37,82,59,-76,44,-76,41,-76,93,-76});
    states[89] = new State(-77);
    states[90] = new State(new int[]{40,91,59,-78,128,-78,129,-78,130,-78,131,-78,133,-78,60,-78,132,-78,62,-78,43,-78,45,-78,42,-78,47,-78,37,-78,44,-78,41,-78,93,-78});
    states[91] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122,41,-50},new int[]{-28,92,-29,94,-27,133,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[92] = new State(new int[]{41,93});
    states[93] = new State(-79);
    states[94] = new State(new int[]{44,95,41,-51});
    states[95] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,96,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[96] = new State(new int[]{128,58,129,60,130,62,131,64,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82,44,-52,41,-52});
    states[97] = new State(new int[]{46,99,91,102,40,-95,59,-95,128,-95,129,-95,130,-95,131,-95,133,-95,60,-95,132,-95,62,-95,43,-95,45,-95,42,-95,47,-95,37,-95,44,-95,41,-95,93,-95,61,-95,152,-95,153,-95},new int[]{-34,98});
    states[98] = new State(-91);
    states[99] = new State(new int[]{154,27},new int[]{-5,100});
    states[100] = new State(new int[]{46,99,91,102,40,-95,59,-95,128,-95,129,-95,130,-95,131,-95,133,-95,60,-95,132,-95,62,-95,43,-95,45,-95,42,-95,47,-95,37,-95,44,-95,41,-95,93,-95,61,-95,152,-95,153,-95},new int[]{-34,101});
    states[101] = new State(-92);
    states[102] = new State(new int[]{93,106,45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,103,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[103] = new State(new int[]{93,104,128,58,129,60,130,62,131,64,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82});
    states[104] = new State(new int[]{46,99,91,102,40,-95,59,-95,128,-95,129,-95,130,-95,131,-95,133,-95,60,-95,132,-95,62,-95,43,-95,45,-95,42,-95,47,-95,37,-95,44,-95,41,-95,93,-95,61,-95,152,-95,153,-95},new int[]{-34,105});
    states[105] = new State(-93);
    states[106] = new State(new int[]{46,99,91,102,40,-95,59,-95,128,-95,129,-95,130,-95,131,-95,133,-95,60,-95,132,-95,62,-95,43,-95,45,-95,42,-95,47,-95,37,-95,44,-95,41,-95,93,-95,61,-95,152,-95,153,-95},new int[]{-34,107});
    states[107] = new State(-94);
    states[108] = new State(-80);
    states[109] = new State(-81);
    states[110] = new State(-82);
    states[111] = new State(new int[]{46,112,59,-83,128,-83,129,-83,130,-83,131,-83,133,-83,60,-83,132,-83,62,-83,43,-83,45,-83,42,-83,47,-83,37,-83,44,-83,41,-83,93,-83});
    states[112] = new State(new int[]{154,27},new int[]{-5,113});
    states[113] = new State(-84);
    states[114] = new State(new int[]{154,27,140,33,147,34,135,35},new int[]{-5,115,-23,118,-24,32});
    states[115] = new State(new int[]{40,116,91,-33});
    states[116] = new State(new int[]{41,117});
    states[117] = new State(-85);
    states[118] = new State(new int[]{91,119});
    states[119] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,120,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[120] = new State(new int[]{93,121,128,58,129,60,130,62,131,64,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82});
    states[121] = new State(-86);
    states[122] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122,140,33,147,34,135,35},new int[]{-27,123,-24,126,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[123] = new State(new int[]{41,124,128,58,129,60,130,62,131,64,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82});
    states[124] = new State(new int[]{154,27,142,108,156,22,155,24,157,26,141,114,40,122,59,-87,128,-87,129,-87,130,-87,131,-87,133,-87,60,-87,132,-87,62,-87,43,-87,45,-87,42,-87,47,-87,37,-87,44,-87,41,-87,93,-87},new int[]{-33,125,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[125] = new State(-88);
    states[126] = new State(new int[]{41,127,91,129});
    states[127] = new State(new int[]{154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-33,128,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[128] = new State(-89);
    states[129] = new State(new int[]{93,130});
    states[130] = new State(new int[]{41,131});
    states[131] = new State(new int[]{154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-33,132,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[132] = new State(-90);
    states[133] = new State(new int[]{128,58,129,60,130,62,131,64,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82,44,-53,41,-53});
    states[134] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122,41,-50},new int[]{-28,135,-29,94,-27,133,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[135] = new State(new int[]{41,136});
    states[136] = new State(new int[]{59,137});
    states[137] = new State(-39);
    states[138] = new State(new int[]{59,139});
    states[139] = new State(-40);
    states[140] = new State(new int[]{59,141});
    states[141] = new State(-41);
    states[142] = new State(new int[]{91,143,46,99,154,-33,61,-95,40,-95,152,-95,153,-95},new int[]{-34,98});
    states[143] = new State(new int[]{93,144,45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,103,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[144] = new State(new int[]{154,27,46,99,91,102,61,-95,40,-95,152,-95,153,-95},new int[]{-16,145,-34,107,-5,41});
    states[145] = new State(new int[]{59,146,44,39});
    states[146] = new State(-56);
    states[147] = new State(new int[]{40,148});
    states[148] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,149,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[149] = new State(new int[]{41,150,128,58,129,60,130,62,131,64,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82});
    states[150] = new State(new int[]{154,27,139,147,151,154,134,159,145,161,123,49,59,166},new int[]{-25,151,-26,54,-5,97,-20,165});
    states[151] = new State(new int[]{138,152,125,-43,154,-43,139,-43,151,-43,134,-43,145,-43,123,-43,59,-43,140,-43,147,-43,135,-43});
    states[152] = new State(new int[]{154,27,139,147,151,154,134,159,145,161,123,49,59,166},new int[]{-25,153,-26,54,-5,97,-20,165});
    states[153] = new State(-42);
    states[154] = new State(new int[]{40,155});
    states[155] = new State(new int[]{45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,156,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[156] = new State(new int[]{41,157,128,58,129,60,130,62,131,64,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82});
    states[157] = new State(new int[]{154,27,139,147,151,154,134,159,145,161,123,49,59,166},new int[]{-25,158,-26,54,-5,97,-20,165});
    states[158] = new State(-44);
    states[159] = new State(new int[]{59,160});
    states[160] = new State(-45);
    states[161] = new State(new int[]{59,162,45,85,43,87,154,27,142,108,156,22,155,24,157,26,141,114,40,122},new int[]{-27,163,-32,84,-33,89,-26,90,-5,97,-13,109,-14,110,-15,111});
    states[162] = new State(-46);
    states[163] = new State(new int[]{59,164,128,58,129,60,130,62,131,64,133,66,60,68,132,70,62,72,43,74,45,76,42,78,47,80,37,82});
    states[164] = new State(-47);
    states[165] = new State(-48);
    states[166] = new State(-49);
    states[167] = new State(new int[]{154,27},new int[]{-16,168,-5,41});
    states[168] = new State(new int[]{59,169,44,39});
    states[169] = new State(-55);
    states[170] = new State(new int[]{91,171,154,-34});
    states[171] = new State(new int[]{93,172});
    states[172] = new State(new int[]{154,27},new int[]{-16,173,-5,41});
    states[173] = new State(new int[]{59,174,44,39});
    states[174] = new State(-57);
    states[175] = new State(new int[]{44,176,41,-27});
    states[176] = new State(new int[]{154,27,140,33,147,34,135,35},new int[]{-22,177,-11,178,-23,28,-5,31,-24,32});
    states[177] = new State(-29);
    states[178] = new State(new int[]{154,27},new int[]{-5,179});
    states[179] = new State(-30);
    states[180] = new State(-28);
    states[181] = new State(-24);
    states[182] = new State(-25);
    states[183] = new State(-21);
    states[184] = new State(-22);
    states[185] = new State(-23);
    states[186] = new State(new int[]{154,27},new int[]{-5,187});
    states[187] = new State(new int[]{123,188});
    states[188] = new State(-9,new int[]{-7,189});
    states[189] = new State(new int[]{125,190,144,14},new int[]{-8,11,-9,12,-10,13});
    states[190] = new State(-8);
    states[191] = new State(new int[]{154,27},new int[]{-5,192});
    states[192] = new State(new int[]{59,193});
    states[193] = new State(-4);
    states[194] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,127});
    rules[2] = new Rule(-1, new int[]{-3,-4});
    rules[3] = new Rule(-3, new int[]{});
    rules[4] = new Rule(-3, new int[]{-3,148,-5,59});
    rules[5] = new Rule(-4, new int[]{-6});
    rules[6] = new Rule(-4, new int[]{-4,-6});
    rules[7] = new Rule(-6, new int[]{136,-5,123,-7,125});
    rules[8] = new Rule(-6, new int[]{136,-5,58,-5,123,-7,125});
    rules[9] = new Rule(-7, new int[]{});
    rules[10] = new Rule(-7, new int[]{-7,-8});
    rules[11] = new Rule(-7, new int[]{-7,-9});
    rules[12] = new Rule(-7, new int[]{-7,-10});
    rules[13] = new Rule(-8, new int[]{144,137,-11,-5,61,-12,59});
    rules[14] = new Rule(-12, new int[]{-13});
    rules[15] = new Rule(-12, new int[]{-14});
    rules[16] = new Rule(-12, new int[]{-15});
    rules[17] = new Rule(-9, new int[]{144,-11,-16,59});
    rules[18] = new Rule(-16, new int[]{-16,44,-5});
    rules[19] = new Rule(-16, new int[]{-5});
    rules[20] = new Rule(-10, new int[]{144,-17,-18,-5,40,-19,41,-20});
    rules[21] = new Rule(-17, new int[]{146});
    rules[22] = new Rule(-17, new int[]{149});
    rules[23] = new Rule(-17, new int[]{143});
    rules[24] = new Rule(-18, new int[]{150});
    rules[25] = new Rule(-18, new int[]{-11});
    rules[26] = new Rule(-19, new int[]{});
    rules[27] = new Rule(-19, new int[]{-21});
    rules[28] = new Rule(-21, new int[]{-22});
    rules[29] = new Rule(-21, new int[]{-21,44,-22});
    rules[30] = new Rule(-22, new int[]{-11,-5});
    rules[31] = new Rule(-11, new int[]{-23});
    rules[32] = new Rule(-11, new int[]{-23,91,93});
    rules[33] = new Rule(-23, new int[]{-5});
    rules[34] = new Rule(-23, new int[]{-24});
    rules[35] = new Rule(-24, new int[]{140});
    rules[36] = new Rule(-24, new int[]{147});
    rules[37] = new Rule(-24, new int[]{135});
    rules[38] = new Rule(-25, new int[]{-26,61,-27,59});
    rules[39] = new Rule(-25, new int[]{-26,40,-28,41,59});
    rules[40] = new Rule(-25, new int[]{-26,152,59});
    rules[41] = new Rule(-25, new int[]{-26,153,59});
    rules[42] = new Rule(-25, new int[]{139,40,-27,41,-25,138,-25});
    rules[43] = new Rule(-25, new int[]{139,40,-27,41,-25});
    rules[44] = new Rule(-25, new int[]{151,40,-27,41,-25});
    rules[45] = new Rule(-25, new int[]{134,59});
    rules[46] = new Rule(-25, new int[]{145,59});
    rules[47] = new Rule(-25, new int[]{145,-27,59});
    rules[48] = new Rule(-25, new int[]{-20});
    rules[49] = new Rule(-25, new int[]{59});
    rules[50] = new Rule(-28, new int[]{});
    rules[51] = new Rule(-28, new int[]{-29});
    rules[52] = new Rule(-29, new int[]{-29,44,-27});
    rules[53] = new Rule(-29, new int[]{-27});
    rules[54] = new Rule(-20, new int[]{123,-30,125});
    rules[55] = new Rule(-31, new int[]{-23,-16,59});
    rules[56] = new Rule(-31, new int[]{-5,91,93,-16,59});
    rules[57] = new Rule(-31, new int[]{-24,91,93,-16,59});
    rules[58] = new Rule(-30, new int[]{});
    rules[59] = new Rule(-30, new int[]{-30,-25});
    rules[60] = new Rule(-30, new int[]{-30,-31});
    rules[61] = new Rule(-27, new int[]{-27,128,-27});
    rules[62] = new Rule(-27, new int[]{-27,129,-27});
    rules[63] = new Rule(-27, new int[]{-27,130,-27});
    rules[64] = new Rule(-27, new int[]{-27,131,-27});
    rules[65] = new Rule(-27, new int[]{-27,133,-27});
    rules[66] = new Rule(-27, new int[]{-27,60,-27});
    rules[67] = new Rule(-27, new int[]{-27,132,-27});
    rules[68] = new Rule(-27, new int[]{-27,62,-27});
    rules[69] = new Rule(-27, new int[]{-27,43,-27});
    rules[70] = new Rule(-27, new int[]{-27,45,-27});
    rules[71] = new Rule(-27, new int[]{-27,42,-27});
    rules[72] = new Rule(-27, new int[]{-27,47,-27});
    rules[73] = new Rule(-27, new int[]{-27,37,-27});
    rules[74] = new Rule(-27, new int[]{-32});
    rules[75] = new Rule(-32, new int[]{45,-27});
    rules[76] = new Rule(-32, new int[]{43,-27});
    rules[77] = new Rule(-32, new int[]{-33});
    rules[78] = new Rule(-33, new int[]{-26});
    rules[79] = new Rule(-33, new int[]{-26,40,-28,41});
    rules[80] = new Rule(-33, new int[]{142});
    rules[81] = new Rule(-33, new int[]{-13});
    rules[82] = new Rule(-33, new int[]{-14});
    rules[83] = new Rule(-33, new int[]{-15});
    rules[84] = new Rule(-33, new int[]{-15,46,-5});
    rules[85] = new Rule(-33, new int[]{141,-5,40,41});
    rules[86] = new Rule(-33, new int[]{141,-23,91,-27,93});
    rules[87] = new Rule(-33, new int[]{40,-27,41});
    rules[88] = new Rule(-33, new int[]{40,-27,41,-33});
    rules[89] = new Rule(-33, new int[]{40,-24,41,-33});
    rules[90] = new Rule(-33, new int[]{40,-24,91,93,41,-33});
    rules[91] = new Rule(-26, new int[]{-5,-34});
    rules[92] = new Rule(-34, new int[]{46,-5,-34});
    rules[93] = new Rule(-34, new int[]{91,-27,93,-34});
    rules[94] = new Rule(-34, new int[]{91,93,-34});
    rules[95] = new Rule(-34, new int[]{});
    rules[96] = new Rule(-5, new int[]{154});
    rules[97] = new Rule(-13, new int[]{156});
    rules[98] = new Rule(-14, new int[]{155});
    rules[99] = new Rule(-15, new int[]{157});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> UsingList, ClassList
#line 59 "CbParser.y"
{ Tree = AST.NonLeaf(NodeType.Program, ValueStack[ValueStack.Depth-2].LineNumber, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 3: // UsingList -> /* empty */
#line 63 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.UsingList, LineNumber); }
        break;
      case 4: // UsingList -> UsingList, Kwd_using, Identifier, ';'
#line 65 "CbParser.y"
{ ValueStack[ValueStack.Depth-4].AddChild(ValueStack[ValueStack.Depth-2]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-4]; }
        break;
      case 5: // ClassList -> ClassDecl
#line 69 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.ClassList, LineNumber, ValueStack[ValueStack.Depth-1]); }
        break;
      case 6: // ClassList -> ClassList, ClassDecl
#line 71 "CbParser.y"
{ ValueStack[ValueStack.Depth-2].AddChild(ValueStack[ValueStack.Depth-1]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 7: // ClassDecl -> Kwd_class, Identifier, '{', DeclList, '}'
#line 75 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Class, ValueStack[ValueStack.Depth-4].LineNumber, ValueStack[ValueStack.Depth-4], null, ValueStack[ValueStack.Depth-2]); }
        break;
      case 8: // ClassDecl -> Kwd_class, Identifier, ':', Identifier, '{', DeclList, '}'
#line 77 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Class, ValueStack[ValueStack.Depth-6].LineNumber, ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 9: // DeclList -> /* empty */
#line 81 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.MemberList, LineNumber); }
        break;
      case 10: // DeclList -> DeclList, ConstDecl
#line 83 "CbParser.y"
{ ValueStack[ValueStack.Depth-2].AddChild(ValueStack[ValueStack.Depth-1]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 11: // DeclList -> DeclList, FieldDecl
#line 85 "CbParser.y"
{ ValueStack[ValueStack.Depth-2].AddChild(ValueStack[ValueStack.Depth-1]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 12: // DeclList -> DeclList, MethodDecl
#line 87 "CbParser.y"
{ ValueStack[ValueStack.Depth-2].AddChild(ValueStack[ValueStack.Depth-1]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 13: // ConstDecl -> Kwd_public, Kwd_const, Type, Identifier, '=', InitVal, ';'
#line 91 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Const, ValueStack[ValueStack.Depth-4].LineNumber, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 14: // InitVal -> AnInteger
#line 94 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 15: // InitVal -> AChar
#line 95 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 16: // InitVal -> AString
#line 96 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 17: // FieldDecl -> Kwd_public, Type, IdentList, ';'
#line 100 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Field, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 18: // IdentList -> IdentList, ',', Identifier
#line 104 "CbParser.y"
{ ValueStack[ValueStack.Depth-3].AddChild(ValueStack[ValueStack.Depth-1]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 19: // IdentList -> Identifier
#line 106 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.IdList, LineNumber, ValueStack[ValueStack.Depth-1]); }
        break;
      case 20: // MethodDecl -> Kwd_public, MethodAttr, MethodType, Identifier, '(', OptFormals, 
               //               ')', Block
#line 110 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Method, ValueStack[ValueStack.Depth-5].LineNumber, ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-7]); }
        break;
      case 21: // MethodAttr -> Kwd_static
#line 113 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.Static, LineNumber); }
        break;
      case 22: // MethodAttr -> Kwd_virtual
#line 114 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.Virtual, LineNumber); }
        break;
      case 23: // MethodAttr -> Kwd_override
#line 115 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.Override, LineNumber); }
        break;
      case 24: // MethodType -> Kwd_void
#line 118 "CbParser.y"
{ CurrentSemanticValue = null; }
        break;
      case 25: // MethodType -> Type
#line 119 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 26: // OptFormals -> /* empty */
#line 123 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.FormalList, LineNumber); }
        break;
      case 27: // OptFormals -> FormalPars
#line 125 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 28: // FormalPars -> FormalDecl
#line 129 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.FormalList, LineNumber, ValueStack[ValueStack.Depth-1]); }
        break;
      case 29: // FormalPars -> FormalPars, ',', FormalDecl
#line 131 "CbParser.y"
{ ValueStack[ValueStack.Depth-3].AddChild(ValueStack[ValueStack.Depth-1]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 30: // FormalDecl -> Type, Identifier
#line 135 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Formal, ValueStack[ValueStack.Depth-1].LineNumber, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 31: // Type -> TypeName
#line 139 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 32: // Type -> TypeName, '[', ']'
#line 141 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Array, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3]); }
        break;
      case 33: // TypeName -> Identifier
#line 144 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 34: // TypeName -> BuiltInType
#line 145 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 35: // BuiltInType -> Kwd_int
#line 148 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.IntType, LineNumber); }
        break;
      case 36: // BuiltInType -> Kwd_string
#line 149 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.StringType, LineNumber); }
        break;
      case 37: // BuiltInType -> Kwd_char
#line 150 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.CharType, LineNumber); }
        break;
      case 38: // Statement -> Designator, '=', Expr, ';'
#line 154 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Assign, ValueStack[ValueStack.Depth-4].LineNumber, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 39: // Statement -> Designator, '(', OptActuals, ')', ';'
#line 156 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Call, ValueStack[ValueStack.Depth-5].LineNumber, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3]); }
        break;
      case 40: // Statement -> Designator, PLUSPLUS, ';'
#line 158 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.PlusPlus, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3]); }
        break;
      case 41: // Statement -> Designator, MINUSMINUS, ';'
#line 160 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.MinusMinus, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3]); }
        break;
      case 42: // Statement -> Kwd_if, '(', Expr, ')', Statement, Kwd_else, Statement
#line 162 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.If, ValueStack[ValueStack.Depth-5].LineNumber, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 43: // Statement -> Kwd_if, '(', Expr, ')', Statement
#line 164 "CbParser.y"
{ var empty = AST.Leaf(NodeType.Empty, LineNumber);
#line 165 "CbParser.y"
                  CurrentSemanticValue = AST.NonLeaf(NodeType.If, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1], empty); }
        break;
      case 44: // Statement -> Kwd_while, '(', Expr, ')', Statement
#line 167 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.While, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 45: // Statement -> Kwd_break, ';'
#line 169 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.Break, LineNumber); }
        break;
      case 46: // Statement -> Kwd_return, ';'
#line 171 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Return, LineNumber, null); }
        break;
      case 47: // Statement -> Kwd_return, Expr, ';'
#line 173 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Return, ValueStack[ValueStack.Depth-2].LineNumber, ValueStack[ValueStack.Depth-2]); }
        break;
      case 48: // Statement -> Block
#line 175 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 49: // Statement -> ';'
#line 177 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.Empty, LineNumber); }
        break;
      case 50: // OptActuals -> /* empty */
#line 181 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.ActualList, LineNumber); }
        break;
      case 51: // OptActuals -> ActPars
#line 183 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 52: // ActPars -> ActPars, ',', Expr
#line 187 "CbParser.y"
{ ValueStack[ValueStack.Depth-3].AddChild(ValueStack[ValueStack.Depth-1]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 53: // ActPars -> Expr
#line 189 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.ActualList, LineNumber, ValueStack[ValueStack.Depth-1]); }
        break;
      case 54: // Block -> '{', DeclsAndStmts, '}'
#line 193 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 55: // LocalDecl -> TypeName, IdentList, ';'
#line 197 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.LocalDecl, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 56: // LocalDecl -> Identifier, '[', ']', IdentList, ';'
#line 199 "CbParser.y"
{ var type = AST.NonLeaf(NodeType.Array, ValueStack[ValueStack.Depth-5].LineNumber, ValueStack[ValueStack.Depth-5]);
#line 200 "CbParser.y"
                  CurrentSemanticValue = AST.NonLeaf(NodeType.LocalDecl, ValueStack[ValueStack.Depth-5].LineNumber, type, ValueStack[ValueStack.Depth-2]); }
        break;
      case 57: // LocalDecl -> BuiltInType, '[', ']', IdentList, ';'
#line 202 "CbParser.y"
{ var type = AST.NonLeaf(NodeType.Array, ValueStack[ValueStack.Depth-5].LineNumber, ValueStack[ValueStack.Depth-5]);
#line 203 "CbParser.y"
                  CurrentSemanticValue = AST.NonLeaf(NodeType.LocalDecl, ValueStack[ValueStack.Depth-5].LineNumber, type, ValueStack[ValueStack.Depth-2]); }
        break;
      case 58: // DeclsAndStmts -> /* empty */
#line 207 "CbParser.y"
{ CurrentSemanticValue = AST.Kary(NodeType.Block, LineNumber); }
        break;
      case 59: // DeclsAndStmts -> DeclsAndStmts, Statement
#line 209 "CbParser.y"
{ ValueStack[ValueStack.Depth-2].AddChild(ValueStack[ValueStack.Depth-1]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 60: // DeclsAndStmts -> DeclsAndStmts, LocalDecl
#line 211 "CbParser.y"
{ ValueStack[ValueStack.Depth-2].AddChild(ValueStack[ValueStack.Depth-1]);  CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 61: // Expr -> Expr, OROR, Expr
#line 214 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Or, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 62: // Expr -> Expr, ANDAND, Expr
#line 215 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.And, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 63: // Expr -> Expr, EQEQ, Expr
#line 216 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Equals, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 64: // Expr -> Expr, NOTEQ, Expr
#line 217 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.NotEquals, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 65: // Expr -> Expr, LTEQ, Expr
#line 218 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.LessOrEqual, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 66: // Expr -> Expr, '<', Expr
#line 219 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.LessThan, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 67: // Expr -> Expr, GTEQ, Expr
#line 220 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.GreaterOrEqual, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 68: // Expr -> Expr, '>', Expr
#line 221 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.GreaterThan, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 69: // Expr -> Expr, '+', Expr
#line 222 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Add, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 70: // Expr -> Expr, '-', Expr
#line 223 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Sub, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 71: // Expr -> Expr, '*', Expr
#line 224 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Mul, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 72: // Expr -> Expr, '/', Expr
#line 225 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Div, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 73: // Expr -> Expr, '%', Expr
#line 226 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Mod, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 74: // Expr -> UnaryExpr
#line 227 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 75: // UnaryExpr -> '-', Expr
#line 230 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.UnaryMinus, ValueStack[ValueStack.Depth-1].LineNumber, ValueStack[ValueStack.Depth-1]); }
        break;
      case 76: // UnaryExpr -> '+', Expr
#line 231 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.UnaryPlus, ValueStack[ValueStack.Depth-1].LineNumber, ValueStack[ValueStack.Depth-1]); }
        break;
      case 77: // UnaryExpr -> UnaryExprNotUMinus
#line 232 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 78: // UnaryExprNotUMinus -> Designator
#line 237 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 79: // UnaryExprNotUMinus -> Designator, '(', OptActuals, ')'
#line 239 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Call, ValueStack[ValueStack.Depth-4].LineNumber, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 80: // UnaryExprNotUMinus -> Kwd_null
#line 241 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.Null, LineNumber); }
        break;
      case 81: // UnaryExprNotUMinus -> AnInteger
#line 243 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 82: // UnaryExprNotUMinus -> AChar
#line 245 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 83: // UnaryExprNotUMinus -> AString
#line 247 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 84: // UnaryExprNotUMinus -> AString, '.', Identifier
#line 249 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Dot, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 85: // UnaryExprNotUMinus -> Kwd_new, Identifier, '(', ')'
#line 251 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.NewClass, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3]); }
        break;
      case 86: // UnaryExprNotUMinus -> Kwd_new, TypeName, '[', Expr, ']'
#line 253 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.NewArray, ValueStack[ValueStack.Depth-4].LineNumber, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 87: // UnaryExprNotUMinus -> '(', Expr, ')'
#line 255 "CbParser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 88: // UnaryExprNotUMinus -> '(', Expr, ')', UnaryExprNotUMinus
#line 257 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Cast, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 89: // UnaryExprNotUMinus -> '(', BuiltInType, ')', UnaryExprNotUMinus
#line 259 "CbParser.y"
{ CurrentSemanticValue = AST.NonLeaf(NodeType.Cast, ValueStack[ValueStack.Depth-3].LineNumber, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 90: // UnaryExprNotUMinus -> '(', BuiltInType, '[', ']', ')', UnaryExprNotUMinus
#line 261 "CbParser.y"
{ var type = AST.NonLeaf(NodeType.Array, ValueStack[ValueStack.Depth-5].LineNumber, ValueStack[ValueStack.Depth-5]);
#line 262 "CbParser.y"
                  CurrentSemanticValue = AST.NonLeaf(NodeType.Cast, ValueStack[ValueStack.Depth-5].LineNumber, type, ValueStack[ValueStack.Depth-1]); }
        break;
      case 91: // Designator -> Identifier, Qualifiers
#line 266 "CbParser.y"
{ CurrentSemanticValue = repNull(ValueStack[ValueStack.Depth-1],ValueStack[ValueStack.Depth-2]); }
        break;
      case 92: // Qualifiers -> '.', Identifier, Qualifiers
#line 270 "CbParser.y"
{ var t = AST.NonLeaf(NodeType.Dot, LineNumber, null, ValueStack[ValueStack.Depth-2]);
#line 271 "CbParser.y"
                  CurrentSemanticValue = repNull(ValueStack[ValueStack.Depth-1],t); }
        break;
      case 93: // Qualifiers -> '[', Expr, ']', Qualifiers
#line 273 "CbParser.y"
{ var t = AST.NonLeaf(NodeType.Index, LineNumber, null, ValueStack[ValueStack.Depth-3]);
#line 274 "CbParser.y"
                  CurrentSemanticValue = repNull(ValueStack[ValueStack.Depth-1],t); }
        break;
      case 94: // Qualifiers -> '[', ']', Qualifiers
#line 276 "CbParser.y"
{ var t = AST.NonLeaf(NodeType.Array, LineNumber, null);
#line 277 "CbParser.y"
                  CurrentSemanticValue = repNull(ValueStack[ValueStack.Depth-1],t); }
        break;
      case 95: // Qualifiers -> /* empty */
#line 279 "CbParser.y"
{ CurrentSemanticValue = null; }
        break;
      case 96: // Identifier -> Ident
#line 282 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.Ident, LineNumber, lexer.yytext); }
        break;
      case 97: // AnInteger -> IntConst
#line 285 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.IntConst, LineNumber, Int32.Parse(lexer.yytext)); }
        break;
      case 98: // AChar -> CharConst
#line 288 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.CharConst, LineNumber, lexer.yytext); }
        break;
      case 99: // AString -> StringConst
#line 291 "CbParser.y"
{ CurrentSemanticValue = AST.Leaf(NodeType.StringConst, LineNumber, lexer.yytext); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 295 "CbParser.y"

#line 296 "CbParser.y"

#line 297 "CbParser.y"
// used to reorganize AST structure for a Designator
#line 298 "CbParser.y"
private AST repNull( AST tree, AST replacement ) {
#line 299 "CbParser.y"
    if (tree == null) return replacement;
#line 300 "CbParser.y"
    AST_nonleaf np = tree as AST_nonleaf;
#line 301 "CbParser.y"
    for( ; ; ) {
#line 302 "CbParser.y"
        if (np == null)
#line 303 "CbParser.y"
            throw new Exception("error restructuring Qualifiers");
#line 304 "CbParser.y"
        if (np[0] == null)
#line 305 "CbParser.y"
            break;
#line 306 "CbParser.y"
        np = np[0] as AST_nonleaf;
#line 307 "CbParser.y"
    }
#line 308 "CbParser.y"
    np[0] = replacement;
#line 309 "CbParser.y"
    return tree;
#line 310 "CbParser.y"
}
#line 311 "CbParser.y"

#line 312 "CbParser.y"
// returns the AST constructed for the Cb program
#line 313 "CbParser.y"
public AST Tree { get; private set; }
#line 314 "CbParser.y"

#line 315 "CbParser.y"
private Scanner lexer;
#line 316 "CbParser.y"

#line 317 "CbParser.y"
// returns the lexer's current line number
#line 318 "CbParser.y"
public int LineNumber {
#line 319 "CbParser.y"
    get{ return lexer.LineNumber == 0? 1 : lexer.LineNumber; }
#line 320 "CbParser.y"
}
#line 321 "CbParser.y"

#line 322 "CbParser.y"
// Use this function for reporting non-fatal errors discovered
#line 323 "CbParser.y"
// while parsing and building the AST.
#line 324 "CbParser.y"
// An example usage is:
#line 325 "CbParser.y"
//    yyerror( "Identifier {0} has not been declared", idname );
#line 326 "CbParser.y"
public void yyerror( string format, params Object[] args ) {
#line 327 "CbParser.y"
    Console.Write("{0}: ", LineNumber);
#line 328 "CbParser.y"
    Console.WriteLine(format, args);
#line 329 "CbParser.y"
}
#line 330 "CbParser.y"

#line 331 "CbParser.y"
// The parser needs a suitable constructor
#line 332 "CbParser.y"
public Parser( Scanner src ) : base(null) {
#line 333 "CbParser.y"
    lexer = src;
#line 334 "CbParser.y"
    Scanner = src;
#line 335 "CbParser.y"
}
#line 336 "CbParser.y"

#line 337 "CbParser.y"

}
}
